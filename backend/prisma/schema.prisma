generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  githubId     String?  @unique
  password     String?
  registeredAt DateTime @default(now())

  // Profile
  avatarUrl String?
  bio       String?

  follows         User[]    @relation("follows")
  followedBy      User[]    @relation("follows")
  messagesSend    Message[] @relation("send")
  messagesReceive Message[] @relation("receive")
  posts           Post[]
  likes           Like[]
  Comment         Comment[]

  @@map("users")
}

model Post {
  id           String    @id @default(uuid())
  title        String
  postImageUrl String?
  content      String
  createdAt    DateTime  @default(now())
  authorId     String
  author       User      @relation(fields: [authorId], references: [id])
  likedBy      Like[]
  comments     Comment[]

  @@map("posts")
}

model Like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id])

  @@id(name: "likeId", [userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Message {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  content    String
  time       DateTime @default(now())
  fromUser   User     @relation("send", fields: [fromUserId], references: [id])
  toUser     User     @relation("receive", fields: [toUserId], references: [id])

  @@map("messages")
}
